# W5500

## W5500 Overview

The W5500 chip is a Hardwired Internet controller designed as a full hardwired TCP/IP stack with WIZnet technology. W5500 provides Internet connectivity to your embedded systems by using SPI(Serial Peripheral Interface). SPI provides easy connection via external MCU to W5500. The clock speed of W5500 SPI supports upto 80MHz. Since W5500 integrates the Hardwired TCP/IP stack with 10/100 Ethernet MAC and PHY, it is truly a one-chip solution for the stable internet connectivity. WIZnet's Hardwired TCP/IP stack supports TCP, UDP, IPv4, ICMP, ARP, IGMP, and PPPoE - and it has been proven through various applications over the last decade. W5500 provides 8 independent SOCKETs to be used simultaneously and 32KB internal memory for data communication. Users can develop an Ethernet application easily by using the simple W5500 SOCKET program instead of handling a complex Ethernet controller. W5500 also provides WOL (Wake on LAN) and a Power Down Mode in order to reduce power consumption.

## W5500 Features[](https://docs.wiznet.io/Product/iEthernet/W5500/japanese-v#features)

- Supports following Hardwired TCP/IP Protocols : TCP, UDP, ICMP, IPv4, ARP, IGMP, PPPoE
- Supports 8 independent sockets simultaneously
- Supports Power down mode
- Supports Wake on LAN over UDP
- Supports High Speed Serial Peripheral Interface(SPI MODE 0, 3)
- Internal 32Kbytes Memory for Tx/Rx Buffers
- 10BaseT/100BaseTX Ethernet PHY embedded
- Support Auto Negotiation (Full and half duplex, 10 and 100-based)
- Not support IP Fragmentation
- 3.3V operation with 5V I/O signal tolerance
- LED outputs (Full/Half duplex, Link, Speed, Active)
- 48 Pin LQFP Lead-Free Package (7x7mm, 0.5mm pitch)

# W5500Documents

---

- Data Sheet (Korean) : [https://docs.wiznet.io/img/products/w5500/W5500_ds_v110e.pdf](https://docs.wiznet.io/img/products/w5500/W5500_ds_v110e.pdf)
- Data Sheet (English) : [https://docs.wiznet.io/img/products/w5500/W5500_ds_v110k.pdf](https://docs.wiznet.io/img/products/w5500/W5500_ds_v110k.pdf)

---

### W5500 Driver

WIZnet's ioLibrary is a comprehensive Internet Offload Library specifically designed for WIZnet chips. This library encompasses a suite of drivers and application protocols to facilitate application designs using WIZnet products, particularly the W5500. The ioLibrary is divided into three distinct sections: ioLibrary_BSD, ioLibrary, and a BSD Type driver for W5200 users.

1. **ioLibrary_BSD**: This segment of the library provides Berkeley Socket type APIs, with function names identical to those in the ioLibrary. The directory structure includes Ethernet features like SOCKET APIs compatible with WIZCHIP (W5500, W5200, etc.) and Internet features such as DHCP client and DNS client. The ioLibrary_BSD is continuously updated and is available on GitHub at [https://github.com/Wiznet/ioLibrary_Driver](https://github.com/Wiznet/ioLibrary_Driver). It also offers various versions of Ethernet and Internet application protocols, along with documents for Socket APIs.
2. **ioLibrary**: This part of the library includes the basic I/O functions, socket register access functions, and utilities for setting up platforms and networks. The latest version, as well as older versions, are available for download. The library has been tested on the CooCox Cookie Board with an ARM Cortex-M0 MCU. More information on using the ioLibrary on the cookie board is available at https://docs.wiznet.io/Product/Open-Source-Hardware/cookie.
3. **BSD Type driver for W5200 User**: This driver, targeting W5200 users, offers BSD-type Socket APIs. It has been evaluated on ARM-CortexM3 (STM32F103 series) chipsets. This driver represents the final version and will not be updated further. It is recommended for legacy projects, with the newer drivers being more suitable for new projects. The source code for this driver can be downloaded at https://docs.wiznet.io/img/products/w5500/w5500_cortexm3_firmware_for_legacy.zip.

WIZnet's commitment to continuous updates and a wide range of support for different chip models makes the ioLibrary a valuable resource for developers working with WIZnet's Internet chips.

### W5500 Reference Schematic

here's a narrative description focusing on the W5500 product from WIZnet, highlighting its reference schematics and recommended RJ45s:

"WIZnet's W5500 product offers diverse connectivity options for various applications. The W5500 is presented with different schematic types for enhanced flexibility in design. The 'External Transformer Type' schematic can be accessed for detailed reference at https://docs.wiznet.io/img/products/w5500/w5500_sch_v110_use_trans_.pdf, featuring an elaborate design and layout.

Moreover, the W5500 also supports the 'RJ45 with Transformer Type' configuration, which is detailed in the schematic available at https://docs.wiznet.io/img/products/w5500/w5500_sch_v110_use_mag_.pdf. This configuration is essential for applications requiring integrated transformer solutions in their network modules.

For advanced applications, the W5500 offers a unique 'RJ45 with integrated Transformer and connected CT' schematic. This schematic, detailed at https://docs.wiznet.io/assets/images/w5500_schematic-connected-cts_003-cd3d18a8736283ecf62d7e27997ccde3.jpg, emphasizes the importance of additional components like C23 and C24 for optimal operation. The schematic addresses issues related to power dissipation and provides guidelines for using a MAGJACK with connected center tap.

In terms of recommended RJ45 connectors for the W5500, several options are highlighted. For the 'External Transformer' type, options include the H1102NL from Pulse, detailed at https://docs.wiznet.io/img/products/w5500/01.h1102nl_h325.pdf, and the LCZ3A1CB from CETUS, available at https://docs.wiznet.io/img/products/w5500/02.lcz3a1cb.pdf. For the 'RJ45 with integrated Transformer' type, connectors like the J1B121ZCCD and J1B1211CCD from CETUS, and the J0011D21BNL from Pulse are recommended, with datasheets available at https://docs.wiznet.io/img/products/w5500/1.j1b121zccd-v0-101115.pdf, https://docs.wiznet.io/img/products/w5500/2.j1b1211ccd.pdf, and https://docs.wiznet.io/img/products/w5500/4.j0011d21bnl.pdf respectively.

Additionally, specific modules like the W5500-EVB, WIZ550io, WIZ550S2E, and WIZ550web, all utilize the J1B1211CCD connector from CETUS, demonstrating the connector's compatibility and versatility within the WIZnet product range."

This narrative incorporates the essential details and URLs from the HTML code, presented in a descriptive format suitable for a dataset.

### Migration from W5200

"WIZnet offers comprehensive migration materials for users transitioning from the W5200 to the W5500 chip. For W5200 users, a special driver is available to facilitate a smooth migration to the W5500. This driver, named w5500_cortexm3_firmware_for_legacy.zip, can be downloaded directly from https://docs.wiznet.io/img/products/w5500/w5500_cortexm3_firmware_for_legacy.zip. It's important to note that this driver is specifically for current W5200 users. For those seeking the newest or latest BSD version driver, additional information can be found on the W5500 Driver page at https://docs.wiznet.io/Product/iEthernet/W5500/driver.

In comparing the W5500 and W5200 chips, several key differences are highlighted. The W5500 chip uses a 0.13um process compared to the 0.18um process of the W5200. Both chips come in a similar package size, but the W5500 is in a 48 LQFP (7x7 mm^2) format, while the W5200 is in a 48 QFN (7x7 mm^2). The IO voltage/core voltage of the W5500 is 3.3V/1.2V, which is slightly different from the W5200's 3.3V/1.8V.

Both chips support 8 sockets each. However, they differ in their SPI Frame structure and memory access capabilities. The W5500 allows TX Memory and RX Memory to be used for general data memory, while the W5200 only permits TX Memory for this purpose. The W5500 operates solely with an SPI MCU Bus Interface, whereas the W5200 supports both SPI and an 8-bit parallel indirect bus mode. The W5500 simplifies the regulator-related circuit by requiring just a capacitor on the LDO output pin and no external chip power supply. In contrast, the W5200 requires an external LDO output voltage of 1.8V.

Other notable differences include the PHY power down setting, with the W5500 enabling configuration through the PHY Register and the W5200 using an external pin. The W5500 supports WOL over UDP, while the W5200 supports WOL over Ethernet. The PHY mode in the W5500 can be set by firmware, a feature absent in the W5200. Status LED configurations also differ, with the W5500 featuring 4 LEDs (SPD/DUP/ACT/Link) compared to the W5200's 3 LEDs (SPD/DUP/Link). The PHY Auto MDIX Function is only supported by the W5200. Lastly, the operating current at 100Mbps full link is typically 132mA for the W5500 and 160mA for the W5200."

### Application

- W5500 TCP Function : By setting some register and memory operation, W5500 provides internet connectivity. This chapter describes how it can be operated. (link) : [https://docs.wiznet.io/Product/iEthernet/W5500/Application/tcp](https://docs.wiznet.io/Product/iEthernet/W5500/Application/tcp)
    
    "The W5500 chip from WIZnet offers a robust TCP function, enabling effective internet connectivity. Users must ensure the PHY LINK (0 bit of PHYCFGR) is checked before attempting any network connection using sockets.
    
    For initial operation, the W5500 requires setting up certain registers including the Mode Register (MR), Interrupt Mask Register (IMR), Retry Time-value Register (RTR), and Retry Count Register (RCR). Details about these registers can be found in the 'Register Descriptions' section.
    
    In terms of network information, users must set basic details in the SHAR (Source Hardware Address Register), GAR (Gateway Address Register), SUBR (Subnet Mask Register), and SIPR (Source IP Address Register). The SHAR should have a unique Ethernet MAC address, as managed by the IEEE. More information on MAC address allocation is available at [http://www.ieee.org/](http://www.ieee.org/) and [http://standards.ieee.org/regauth/oui/index.shtml](http://standards.ieee.org/regauth/oui/index.shtml).
    
    Setting up socket memory is crucial, with each socket being assigned 2KB of RX and TX memory. The W5500 chip supports 8 independently and simultaneously usable sockets, catering to various communication modes like TCP, UDP, IPRAW, and MACRAW.
    
    The TCP function of the W5500 is connection-oriented, requiring the setting up of a connection SOCKET using IP and port numbers. It supports both TCP SERVER and TCP CLIENT modes. The TCP SERVER listens for connection requests from TCP CLIENTS and accepts them to establish a connection SOCKET. The TCP CLIENT mode, on the other hand, initiates the connection.
    
    For data communications, after the SOCKET initialization, the W5500 chip can transmit and receive data. The process involves checking the status of the Sn_SR register and handling commands like LISTEN, CONNECT, and DISCON. The chip also includes methods for handling data reception and transmission, disconnect requests, and timeout scenarios. Specific commands and steps are outlined for managing these operations efficiently.
    
    In summary, the W5500 chip offers a comprehensive suite of functions for TCP/IP communication, with detailed steps and considerations for initializing and managing sockets, setting network information, handling data communications, and ensuring successful connection and disconnection processes."
    
- **W5500 UDP Function : By setting some register and memory operation, W5500 provides internet connectivity. This chapter describes how it can be operated. (link) :** [https://docs.wiznet.io/Product/iEthernet/W5500/Application/udp](https://docs.wiznet.io/Product/iEthernet/W5500/Application/udp)
    
    W5500 UDP Function, a feature of WIZnet's W5500 Ethernet controller. The W5500 provides internet connectivity by setting various registers and memory operations. The document is structured to guide users through different stages of using the W5500's UDP function, including initialization, basic settings, network information settings, socket memory information, data communications, and multicast communication.
    
    1. **Initialization**: Before making a network connection using sockets, it's essential to check the PHY LINK (0 bit of PHYCFGR).
    2. **Basic Settings**: The operation of the W5500 requires setting up various registers like Mode Register (MR), Interrupt Mask Register (IMR), Retry Time-value Register (RTR), and Retry Count Register (RCR).
    3. **Network Information Settings**: Basic network information such as Source Hardware Address Register (SHAR), Gateway Address Register (GAR), Subnet Mask Register (SUBR), and Source IP Address Register (SIPR) must be set for communication.
    4. **Socket Memory Information**: The socket TX/RX memory information is set in this stage. For instance, assigning 2KB RX, TX memory per SOCKET is mentioned.
    5. **Data Communications**: The W5500 supports 8 sockets for TCP, UDP, IPRAW, and MACRAW modes. For UDP, which is a connection-less protocol, communication is performed without a connection socket. It details the methods for unicast, broadcast, and multicast communications.
    6. **Multicast**: Multicast communication is with many specified others who are registered in a multicast group. The document explains how to set up a SOCKET for multicast communication, including setting the Multicast-Group hardware and IP address, and the Multicast-Group port number.
    
    Each section is complemented with code snippets and illustrations to provide a comprehensive understanding of the W5500's UDP functionality. The document serves as a technical guide for users who need to implement and troubleshoot network-related functionalities using the W5500 chip.
    
- w5500 **IPRAW MODE (link) :** [https://docs.wiznet.io/Product/iEthernet/W5500/Application/ipraw](https://docs.wiznet.io/Product/iEthernet/W5500/Application/ipraw) ****
    
    The HTML content you provided describes the IPRAW mode of the WIZnet W5500 chip, a versatile component that can handle the IP layer's upper protocol in the TCP/IP stack. The W5500's IPRAW mode is particularly proficient in managing transport layer protocols, including ICMP (0x01), IGMP (0x02), TCP (0x06), and UDP (0x11), based on the protocol field of the IP header. This functionality is crucial for applications requiring direct protocol handling at the IP level.
    
    The W5500 is adept at handling ICMP functions, including ping, which, while implemented as a hardwired feature, can also be directly processed by the host when required. To facilitate this, the host can open Socket n in IPRAW mode. This feature demonstrates the W5500's flexibility in network communication tasks, catering to specific needs beyond standard operations.
    
    For developers working with the W5500 in IPRAW mode, the development environment includes an MCU (STM32F13C8) and several programming tools such as CoIDE V1.7.4, Flash Loader Demonstrator, Terminal V1.9b, and Wireshark V1.10.3. These tools provide a comprehensive environment for developing and testing applications using the W5500.
    
    Additionally, the documentation offers application notes and source code for the W5500 in IPRAW mode. These resources are essential for developers looking to understand and implement the IPRAW mode in their projects. The application notes and source code versions are available for download, including versions 1.0.0 and 1.1.0, with corresponding dates and details. For example, the source code version 1.1.0, dated 2015-05-10, includes modifications for using all sockets, indicating ongoing enhancements to the W5500's capabilities.
    
    A reference video, "IPRAW Ping Test," is available on YouTube ([https://www.youtube.com/watch?v=XqEvf088CC4](https://www.youtube.com/watch?v=XqEvf088CC4)), providing a practical demonstration of the W5500's capabilities in IPRAW mode.
    
    For in-depth technical details, the W5500 datasheet is available in both English and Korean versions (version 1.0.9), accessible through direct links. The datasheet history provides insights into the evolution of the W5500's specifications and features, with detailed descriptions of each version's changes and improvements.
    
    Lastly, the history of the WIZ550io, another WIZnet product, is outlined, detailing its versions, release dates, and specific changes made in each version. This history reflects WIZnet's commitment to continuous product development and enhancement, ensuring their products remain relevant and effective for various networking applications.
    
    In summary, the W5500 chip from WIZnet, particularly in its IPRAW mode, offers robust capabilities for handling upper layer protocols in the IP stack, supplemented with comprehensive development tools, detailed documentation, and ongoing product support and enhancement.
    
- **PPPoE (link) :** [https://docs.wiznet.io/Product/iEthernet/W5500/Application/pppoe](https://docs.wiznet.io/Product/iEthernet/W5500/Application/pppoe)
    
    PPP (Point-to-Point Protocol) and PPPoE (Point-to-Point Protocol over Ethernet) in MACRAW mode by WIZnet TCP/IP devices. PPP is a link-layer protocol used for establishing a direct connection to a Network Access Server (NAS), typically provided by an Internet Service Provider (ISP). This protocol is widely utilized in scenarios such as ADSL connections, which commonly use telephone lines for communication.
    
    In terms of development environment for working with WIZnet devices in PPP/PPPoE mode, the setup includes using an MCU, specifically the STM32F103C8. The development tools listed are CoIDE V1.7.4, Flash Loader Demonstrator, Terminal v1.9b, and WireShark V1.10.3. These tools collectively provide a robust environment for developing, programming, debugging, and analyzing network communications for applications using PPP/PPPoE with WIZnet devices.
    
    The documentation section includes application notes with a revision history, indicating the evolution of the application development. The first release, version 1.0.0, was followed by version 1.0.1, which introduced a change from a timer function to a delay function. This change reflects an improvement or optimization in the application's functioning. The application notes for these versions can be downloaded from the provided links, such as [an_macrawpppoe_v100k.pdf](https://chat.openai.com/img/products/w5500/application/an_macrawpppoe_v100k.pdf) and [an_macrawpppoe_v101k.pdf](https://chat.openai.com/img/products/w5500/application/an_macrawpppoe_v101k.pdf).
    
    Furthermore, the content highlights that the PPPoE reference code is specifically designed for the W5500 chip. However, due to the implementation of the PPPoE application in MACRAW mode, other WIZnet chips like the W5100, W5200, W5300, W7100, and W7200 can also utilize this application. This compatibility across different chips underscores the versatility and adaptability of WIZnet's technology in various networking scenarios.
    
    The reference code section also includes its own revision history and a link to the version 1.0.1 of the reference code ([w5500_example_pppoe_stm32f103x_coide_v101.zip](https://chat.openai.com/img/products/w5500/application/w5500_example_pppoe_stm32f103x_coide_v101.zip)), underscoring the continual development and refinement of WIZnet's resources for PPP/PPPoE applications.
    
    In summary, this documentation offers valuable insights into the development and implementation of PPP and PPPoE protocols in MACRAW mode with WIZnet devices, accompanied by useful tools, application notes, and reference codes, ensuring developers have the necessary resources for effective network application development.
    
- **W5500 SPI Performance (link) :** [https://docs.wiznet.io/Product/iEthernet/W5500/Application/spi-performance](https://docs.wiznet.io/Product/iEthernet/W5500/Application/spi-performance)
    
    WIZnet's W5500 product showcases impressive SPI performance, particularly when evaluated with different MCU configurations and SPI clock speeds.
    
    In one test scenario using a Cortex-M3 MCU (specifically the STM32F103C8), the W5500 was tested for SPI transmission. The development tool used was CoIDE v1.7.4, with the main clock at 72MHz and a maximum SPI clock of 36MHz. The test project, W5500_SPI_Performance.zip, can be found at https://docs.wiznet.io/img/products/w5500/application/w5500_spi_performance.zip. Performance was measured using the AX2 test tool, in Mbps. The test revealed varied data throughput rates depending on the buffer and socket sizes, ranging from 2.648 Mbps to 3.443 Mbps.
    
    Another test was conducted with a Cortex-M0 MCU (M0516LBN), where the main clock was set at 50MHz and the SPI clock at a maximum of 25MHz. The same test project was used, accessible at https://docs.wiznet.io/img/products/w5500/application/w5500_spi_performance.zip. This configuration showed a different range of data throughput rates, from 1.49 Mbps to 1.693 Mbps.
    
    Furthermore, the W5500's data throughput was evaluated in relation to varying SPI clock speeds using the Cortex-M3 MCU. The test, documented in SPI_SPEEP_TEST.zip at https://docs.wiznet.io/img/products/w5500/application/w5500_spispeed_test_loopback_20140212.zip, showed how the data throughput varied significantly with changes in SPI clock speed, ranging from 0.124 Mbps at 0.281MHz to 3.63 Mbps at 36MHz for a 16KB socket and data buffer size.
    
    In summary, the W5500 demonstrates robust and adaptable performance in SPI transmission, offering flexibility and efficiency in various configurations. Further details, including comprehensive test results, can be found in the SPI_SPEED_TEST.xls at https://docs.wiznet.io/assets/files/spi_speed-80a9a785c488db7e4b3629ef4a57ffc2.xlsx.
    

### W5500-EVB

The W5500-EVB, an evaluation board for the W5500 chip, is designed as a development platform for microcontroller applications enabled with network connectivity. This board is based on the 32-bit ARM® Cortex™-M0 microcontroller and integrates the W5500 Hardwired TCP/IP chip. It stands out for being compatible with Arduino pins, making it a versatile choice for development in familiar hardware environments.

Key Features of the W5500-EVB:

1. **W5500 Hardwired TCP/IP Chip**:
    - The W5500 chip is a hardwired TCP/IP embedded Ethernet controller that simplifies the implementation of Internet connectivity.
    - It supports a variety of network protocols, including TCP, UDP, IPv4, ICMP, ARP, IGMP, and PPPoE.
    - The chip includes an internal 32kB Tx/Rx socket buffer memory and interfaces through SPI (Serial Peripheral Interface).
    - More information about the W5500 chip can be found at https://docs.wiznet.io/Product/iEthernet/W5500/overview.
2. **NXP LPC11E36/501 MCU (LPC11E36FHN33)**:
    - The board features a 32-bit ARM® Cortex™-M0 microcontroller running at up to 50MHz.
    - It includes 96kB of on-chip flash program memory, 12kB SRAM, and 4kB EEPROM.
    - Various interfaces are provided, including UART, I2C, SPI/SSP, ADC, PWM, and more.
    - For detailed information, visit the NXP product page: [http://www.nxp.com/products/microcontrollers/cortex_m0_m0/lpc1100/LPC11E36FHN33.html](http://www.nxp.com/products/microcontrollers/cortex_m0_m0/lpc1100/LPC11E36FHN33.html).
3. **On-board Temperature Sensor**:
    - The board includes a Microchip TC1047A temperature-to-voltage converter.
    - This sensor can measure a wide temperature range (-40 to +125 degrees Celsius) and operates within a voltage range of 2.7V to 4.4V.
    - For more details, visit the Microchip product page: [http://www.microchip.com/wwwproducts/Devices.aspx?product=TC1047](http://www.microchip.com/wwwproducts/Devices.aspx?product=TC1047).
4. **Connectivity and Interfaces**:
    - The W5500-EVB is compatible with Arduino Shields for the UNO Rev3.
    - It features a 10/100Mbps Ethernet port (RJ-45 with transformer).
    - A virtual COM Port (UART via USB Mini-B) is available, with drivers downloadable from [http://www.ftdichip.com/Drivers/VCP.htm](http://www.ftdichip.com/Drivers/VCP.htm).
    - The board also includes a standard 10-pin Cortex debug connector for Serial Wire Debug (SWD).
5. **Additional Components**:
    - The board is equipped with two user push buttons, one RGB LED, and a potentiometer for ADC control.
    - It includes an external 4-Mbit serial dataflash memory (SPI).
    - The board operates in an industrial temperature range (-40 to +85 degrees Celsius).
6. **Form Factor**:
    - The W5500-EVB has dimensions of 93 x 53 x 17.3mm (H).
    - It includes a two-layer PCB and is powered by a 5V DC supply or a USB connector.

The W5500-EVB provides a comprehensive platform for developing network applications in small form-factor and non-OS based embedded devices. For firmware development, the board supports the LPCXpresso IDE, with further details available at [http://www.lpcware.com/lpcxpresso](http://www.lpcware.com/lpcxpresso). Additionally, libraries and application example source code for the W5500-EVB can be downloaded from [https://github.com/Wiznet/W5500_EVB](https://github.com/Wiznet/W5500_EVB).

Technical references including datasheets, schematics, part lists, and DXF files are available,

as follows:

1. **Datasheets**:
    - W5500 Datasheet: https://docs.wiznet.io/Product/iEthernet/W5500/datasheet
    - NXP LPC11E3x Datasheet: [http://www.nxp.com/documents/data_sheet/LPC11E3X.pdf](http://www.nxp.com/documents/data_sheet/LPC11E3X.pdf)
    - Microchip TC1027/TC1047A Datasheet (Temperature Sensor): [http://ww1.microchip.com/downloads/en/DeviceDoc/21498D.pdf](http://ww1.microchip.com/downloads/en/DeviceDoc/21498D.pdf)
    - ATMEL AT45DB041D Datasheet (External Dataflash Memory): https://docs.wiznet.io/img/products/w5500/w5500_evb/at45db041d-su.pdf
2. **Schematics**:
    - W5500 EVB Rev1.0 Schematic (Eagle CAD): https://docs.wiznet.io/img/products/w5500/w5500_evb/w5500_evb_v1.0_140527.zip
    - W5500 EVB Rev1.0 Schematic (PDF): https://docs.wiznet.io/img/products/w5500/w5500_evb/w5500_evb_v1.0_140527.pdf
3. **Part List**:
    - W5500 EVB Rev1.0 Part List: https://docs.wiznet.io/img/products/w5500/w5500_evb/w5500_evb_pl_140527-1.pdf
4. **DXF Files**:
    - W5500-EVB DXF File: https://docs.wiznet.io/img/products/w5500/w5500_evb/w5500-evb-dxf.zip
5. **Dimension**:
    - W5500 EVB Rev1.0 Dimension: Displayed in an image available at https://docs.wiznet.io/assets/images/w5500_evb_v1.0_demension-53b063c668204056a7a5840e79f443ee.png

Additionally, the W5500-EVB includes guidance for getting started with firmware and new projects, and offers resources for virtual COM port drivers. For beginners, a "Hello World!" tutorial and instructions for downloading new programs are provided at https://docs.wiznet.io/Product/iEthernet/W5500/W5500-EVB/getting-started.

This comprehensive set of features and resources makes the W5500-EVB an ideal platform for developing embedded network applications leveraging the W5500 chip's capabilities.

### W5500-EVB Getting Started

“If you're starting with the W5500 EVB for the first time, here are the steps to get your board up and running:

1. **Connecting Your Board**:
    - Connect the W5500 EVB to a PC using a USB cable and attach a LAN cable to the board. It's crucial to have the LAN cable connected because the default demo firmware checks the PHY link status periodically. Without a LAN connection, the board will not operate correctly, and the RGB LED will not blink.
2. **RGB LED Blinky**:
    - Upon successful operation at the first boot, the on-board RGB LED will continuously blink. This blinking involves the red, green, and blue LEDs lighting up in an alternating sequence.
3. **On/Off the RGB LED Blinky**:
    - You can change the status of the RGB LED by pressing button1 (SW1). This action toggles the LED Blinky On/Off. During this process, the board will output an 'On' or 'Off' message via the serial debug port.
4. **Serial Debug Message Print Out**:
    - The board outputs serial "debug" messages via the USB port, which acts as a virtual COM Port. These messages provide information about network configuration and the loopback socket. To view these messages, check the virtual COM port number in your system's properties and connect to that serial port with a terminal program set to 115200.8.N.1.
5. **Loopback Test**:
    - The loopback example runs both TCP and UDP sessions. Ensure your board and PC are configured within the same network range. You can modify the board-side network settings by editing the code in [src>>LB_main.c] to match your PC's network range. For TCP, use a program like Hercules to connect to the board's IP at port 5000, and for UDP, send data to the board's IP at port 3000. Success or failure in connection or data transmission should be diagnosed with link status checks, ping tests, network configuration reviews, and checking for any security software on your PC that may block the connection.
6. **Firmware**:
    - The W5500 EVB firmware is based on the LPCXpresso IDE. More details about this IDE can be found at the NXP LPCXpresso platform page: [http://www.lpcware.com/lpcxpresso](http://www.lpcware.com/lpcxpresso). Additionally, you can find the installation and activation guide for LPCXpresso IDE and download libraries and application example source code for W5500-EVB at [https://github.com/Wiznet/W5500_EVB](https://github.com/Wiznet/W5500_EVB).
7. **Downloading a New Program**:
    - For flash programming via UART, you'll need to put the W5500 EVB in ISP mode, run the Flash Magic tool, set up the tool settings, start flash programming, and then run the new program. Detailed instructions and settings can be found in the documentation or online resources.

Following these steps should help you successfully start using your W5500 EVB.”

### Make New W5500 EVB Projects

“process for creating a new project with the W5500 EVB using the LPCXpresso IDE (link): [https://docs.wiznet.io/Product/iEthernet/W5500/W5500-EVB/make-new-projects](https://docs.wiznet.io/Product/iEthernet/W5500/W5500-EVB/make-new-projects)

1. **Development Environment and Compiler Setup**: For W5500 EVB project development, the first step involves downloading and installing the NXP LPCXpresso IDE, which includes a C compiler. This IDE is available in both free and commercial versions, with the free version supporting up to 8k of code, extendable to 256k with free registration. The IDE and compiler can be downloaded from [http://www.lpcware.com/lpcxpresso/download](http://www.lpcware.com/lpcxpresso/download), and registration can be completed at [http://www.lpcware.com/user/register](http://www.lpcware.com/user/register). After registering, you can generate an activation code on [http://www.lpcware.com/lpcxpresso/activate](http://www.lpcware.com/lpcxpresso/activate) to extend your compiler's capacity.
2. **Project Creation and Configuration**: Initiating a new project in LPCXpresso IDE involves selecting 'New project' from the QuickStart panel, choosing 'LPC11Exx' under MCU category, and opting for 'LPCOpen - C Project' as the project type. The target MCU should be set to 'LPC11E36/501'.
3. **Library Importation**: Essential libraries for the W5500 EVB project include the LPCOpen Chip Library (lpc_chip_11exx), LPCOpen Board Library (wiznet_evb_w5500evb_board), and WIZnet ioLibrary. These libraries can be obtained from the WIZnet GitHub repository at [https://github.com/Wiznet/W5500_EVB](https://github.com/Wiznet/W5500_EVB). After downloading, these should be imported into the LPCXpresso IDE workspace.
4. **Project and Library Linking**: In the LPCXpresso IDE, link the LPCOpen Chip and Board Libraries to your project. This step is crucial for leveraging the libraries' functionalities in your W5500 EVB project.
5. **Project Finalization**: Completing the project setup involves selecting the required libraries, setting the library type for serial debugging, and adjusting the C/C++ build commands to generate the firmware image in BIN and HEX formats. Detailed instructions for these settings can be found in the NXP LPCXpresso Getting Started User Guide, available at [http://www.nxp.com/documents/other/LPCXpresso_Getting_Started_User_Guide.pdf](http://www.nxp.com/documents/other/LPCXpresso_Getting_Started_User_Guide.pdf).

This comprehensive guide ensures that developers can smoothly initiate and configure new projects for the W5500 EVB using the LPCXpresso IDE, paving the way for successful development and implementation of their applications.”

### How to install and Activate LPCXpresso IDE (link) : [https://docs.wiznet.io/Product/iEthernet/W5500/W5500-EVB/how-to-install-and-activate-lpcxpresso](https://docs.wiznet.io/Product/iEthernet/W5500/W5500-EVB/how-to-install-and-activate-lpcxpresso)

## W5500-EVB-Pico (link : [https://docs.wiznet.io/Product/iEthernet/W5500/w5500-evb-pico](https://docs.wiznet.io/Product/iEthernet/W5500/w5500-evb-pico))

“The W5500-EVB-Pico is an evaluation board based on the Raspberry Pi RP2040 and W5500, a fully hardwired TCP/IP controller. It operates similarly to the Raspberry Pi Pico board but includes additional Ethernet functionality via the W5500. This board is AWS IoT Core Qualified and Microsoft Azure Device Certified.

Key features of the W5500-EVB-Pico include:

- RP2040 microcontroller with 2MByte Flash, featuring a dual-core Cortex M0+ processor with up to 133MHz speed, 264kByte multi-bank high-performance SRAM, and various other capabilities like a 12-bit 500ksps ADC, UART, I2C, SPI, and PWM channels.
- The W5500 chip supports hardwired internet protocols (TCP, UDP, ICMP, IPv4, ARP, IGMP, PPPoE), 8 independent hardware sockets, 32 Kbytes memory for TX/RX Buffers, and high-speed Serial Peripheral Interface (SPI MODE 0, 3).
- The board includes a Micro-USB B port for power and data, a 40-pin 'DIP' style interface with edge castellations, a 3-pin ARM Serial Wire Debug (SWD) port, embedded 10 / 100 Ethernet PHY, and built-in RJ45 and LDO.

For hardware specifications, the pinout of the W5500-EVB-Pico is directly connected to the GPIO of the RP2040 and mirrors the Raspberry Pi Pico board's pinout, with some GPIOs dedicated to SPI communication with the W5500 for Ethernet functionality.

The operational conditions of the W5500-EVB-Pico include a maximum temperature of 85°C (including self-heating), a minimum temperature of -20°C, and various voltage specifications for VBUS and VSYS. The board is designed to operate effectively in ambient temperatures up to 70°C.

Technical references and resources for the W5500-EVB-Pico include datasheets for the RP2040 and W5500, schematics, part lists, Gerber files, firmware examples for different platforms (C/C++, CircuitPython, MicroPython), and certification documents for CE and FCC. It also holds AWS and Microsoft Azure certifications, ensuring compatibility and reliability with these cloud platforms.

The W5500-EVB-Pico can be purchased from online shops like WIZnetUS and WIZnetKorea.

For more information, you can visit the following URLs:

- W5500-EVB-Pico Overview: [https://eshop.wiznet.io/shop/module/w5500-evb-pico/](https://eshop.wiznet.io/shop/module/w5500-evb-pico/)
- AWS Partner Device Catalog: [https://devices.amazonaws.com/detail/a3G8a00000311tuEAA/W5500-EVB-Pico](https://devices.amazonaws.com/detail/a3G8a00000311tuEAA/W5500-EVB-Pico)
- Microsoft Azure Certified Device Catalog: [https://devicecatalog.azure.com/devices/b278ce42-dde1-46b7-919e-4ae3a5266a3c](https://devicecatalog.azure.com/devices/b278ce42-dde1-46b7-919e-4ae3a5266a3c) “

W5500 Frimware example (link) : [https://docs.wiznet.io/Product/iEthernet/W5500/w5500-evb-pico#firmware-example](https://docs.wiznet.io/Product/iEthernet/W5500/w5500-evb-pico#firmware-example)